{
  "cases": [
    {
      "id": "count-all",
      "query": "select count(*) from stream where @Timestamp >= now() - 30d",
      "notes": "Tests page traversal performance only; avoids data copies, serialization, and evaluation."
    },
    {
      "id": "count-having-request-id",
      "query": "select count(*) from stream where RequestId is not null and @Timestamp >= now() - 30d",
      "notes": "Tests sparse deserialization and condition evaluation atop basic page traversal."
    },
    {
      "id": "count-exception-starts-with-sys",
      "query": "select count(*) from stream where @Exception like 'Sys%' and @Timestamp >= now() - 30d",
      "notes": "Text search performance. Chooses 'Sys' because in .NET data there should be some hits."
    },
    {
      "id": "count-message-starts-with-fai",
      "query": "select count(*) from stream where @Message like 'Fai%' and @Timestamp >= now() - 30d",
      "notes": "Text search performance; worse on @Message than other properties because fragment pre-filtering is not used."
    },
    {
      "id": "count-by-level",
      "query": "select count(*) from stream where @Timestamp >= now() - 30d group by @Level",
      "notes": "Grouping performance, strings, small number of groups."
    },
    {
      "id": "count-by-millisecond",
      "query": "select count(*) from stream where @Timestamp >= now() - 30d group by @Timestamp % 1ms limit 100",
      "notes": "Grouping performance, numbers, up to 10000 groups."
    },
    {
      "id": "count-by-day",
      "query": "select count(*) from stream where @Timestamp >= now() - 30d group by time(12h)",
      "notes": "Time partitioning performance."
    },
    {
      "id": "distinct-exception-20ch-limit-100",
      "query": "select distinct(substring(@Exception, 0, 20)) from stream where @Exception is not null and @Timestamp >= now() - 30d limit 100",
      "notes": "Distinct on computed text."
    },
    {
      "id": "order-by-ts-mod-10k",
      "query": "select @Timestamp from stream where @Timestamp >= now() - 30d order by @Timestamp % 1ms limit 10",
      "notes": "Tests performance of limited sort."
    },
    {
      "id": "order-by-message-limit-10",
      "query": "select @Message from stream where @Timestamp >= now() - 30d order by @Message limit 10",
      "notes": "Adds character collation to limited sort."
    }
  ]
}
